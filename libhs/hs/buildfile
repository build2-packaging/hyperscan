int_libs = # Interface dependencies.
imp_libs = # Implementation dependencies.

lib{hs}: {h c}{** -src/hwlm/noodle_engine_*.c -src/dispatcher.c -version} \
         {h cxx}{** -version -**dump.cpp -src/nfa/nfa_dump_*.cpp} \
         hxx{include/boost-patched/graph/*.hpp} \
         h{version} \
         $imp_libs $int_libs

lib{hs}: c{ src/hwlm/noodle_engine_avx2.c }: include = adhoc

# Include the generated version header into the distribution (so that we don't
# pick up an installed one) and don't remove it when cleaning in src (so that
# clean results in a state identical to distributed).
#
h{version}: in{version} $src_root/manifest
{
  dist  = true
  clean = ( $src_root != $out_root )
}

# Build options.
#
cc.poptions =+ "-I$out_root" "-I$src_root" "-I$src_base" "-I$src_base/src" "-I$src_base/include"
cc.coptions += -mavx2
cxx.coptions =+ -fvisibility=hidden

obja{*}: cxx.poptions += -DLIBHS_STATIC_BUILD
objs{*}: cxx.poptions += -DLIBHS_SHARED_BUILD

# Export options.
#
lib{hs}:
{
  cc.export.poptions = "-I$out_root" "-I$src_root"
  cc.export.libs = $int_libs
}

liba{hs}: cc.export.poptions += -DLIBHS_STATIC
libs{hs}: cc.export.poptions += -DLIBHS_SHARED

# For pre-releases use the complete version to make sure they cannot be used
# in place of another pre-release or the final version. See the version module
# for details on the version.* variable values.
#
if $version.pre_release
  lib{hs}: bin.lib.version = @"-$version.project_id"
else
  lib{hs}: bin.lib.version = @"-$version.major.$version.minor"

h{*}: install = false
hxx{*}: install = false

for h: {hs_version hs hs_common hs_compile hs_runtime}
{
  h{$h}@./$path.directory($h): install = include/hs/
}

h{version}: install = include/hs/

